<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" xmlns:xdt="http://schemas.microsoft.com/XML-Document-Transform">
	<PropertyGroup xdt:Transform="Insert">
		<!--
			***************************************************************************************
			
			Previous elements are from HansKindberg-Xml-Transformation-On-Build.targets
			
			Next elements are from HansKindberg-EPiServer-Build.Transform.targets
			
			***************************************************************************************
		-->
	</PropertyGroup>
	<PropertyGroup xdt:Transform="Insert">
		<CopyBinariesToTargetDirectoryDependsOn>
			BeforeCopyBinariesToTargetDirectory;
			CoreCopyBinariesToTargetDirectory;
			AfterCopyBinariesToTargetDirectory
		</CopyBinariesToTargetDirectoryDependsOn>
		<CoreCopyBinariesToTargetDirectoryDependsOn />
	</PropertyGroup>
	<Target Name="AfterCopyBinariesToTargetDirectory" xdt:Transform="Insert" />
	<Target Name="BeforeCopyBinariesToTargetDirectory" xdt:Transform="Insert" />
	<Target
		Name="CopyBinariesToTargetDirectory"
		AfterTargets="AfterBuild"
		DependsOnTargets="$(CopyBinariesToTargetDirectoryDependsOn)"
		xdt:Transform="Insert"
	/>
	<Target
		Name="CoreCopyBinariesToTargetDirectory"
		Condition="Exists($(TargetDir)) AND ($(EPiServerBinariesDirectory) != '' OR @(DependencyBinariesDirectories) != '')"
		DependsOnTargets="$(CoreCopyBinariesToTargetDirectoryDependsOn)"
		xdt:Transform="Insert"
	>
		<ItemGroup>
			<EPiServerBinary Include="$(EPiServerBinariesDirectory)**\*.*" />
		</ItemGroup>
		<Message
			Condition="!Exists('$(TargetDir)%(EPiServerBinary.RecursiveDir)%(EPiServerBinary.Filename)%(EPiServerBinary.Extension)')"
			Importance="$(MessageImportance)"
			Text="Target 'CoreCopyBinariesToTargetDirectory': Copying '%(EPiServerBinary.RecursiveDir)%(EPiServerBinary.Filename)%(EPiServerBinary.Extension)' to '$(TargetDir)'."
		/>
		<Copy
			Condition="!Exists('$(TargetDir)%(EPiServerBinary.RecursiveDir)%(EPiServerBinary.Filename)%(EPiServerBinary.Extension)')"
			DestinationFiles="$(TargetDir)%(EPiServerBinary.RecursiveDir)%(EPiServerBinary.Filename)%(EPiServerBinary.Extension)"
			SourceFiles="%(EPiServerBinary.Identity)"
		/>
		<ItemGroup>
			<DependencyBinary Include="%(DependencyBinariesDirectories.Identity)**\*.*" />
		</ItemGroup>
		<Message
			Condition="!Exists('$(TargetDir)%(DependencyBinary.RecursiveDir)%(DependencyBinary.Filename)%(DependencyBinary.Extension)')"
			Importance="$(MessageImportance)"
			Text="Target 'CoreCopyBinariesToTargetDirectory': Copying '%(DependencyBinary.RecursiveDir)%(DependencyBinary.Filename)%(DependencyBinary.Extension)' to '$(TargetDir)'."
		/>
		<Copy
			Condition="!Exists('$(TargetDir)%(DependencyBinary.RecursiveDir)%(DependencyBinary.Filename)%(DependencyBinary.Extension)')"
			DestinationFiles="$(TargetDir)%(DependencyBinary.RecursiveDir)%(DependencyBinary.Filename)%(DependencyBinary.Extension)"
			SourceFiles="%(DependencyBinary.Identity)"
		/>
		
		
		
		<!--
		<Message
			Importance="$(MessageImportance)"
			Text="Target 'CoreCopyBinariesToTargetDirectory': Copying '$(TargetDir)%(DependencyBinary.RecursiveDir)%(DependencyBinary.Filename)%(DependencyBinary.Extension)' to '$(TargetDir)'."
		/>
		-->



		<!--
		<Message
			Condition="%(DependencyBinariesDirectories) != ''"
			Importance="$(MessageImportance)"
			Text="Target 'CoreCopyBinariesToTargetDirectory': Copying dependency binaries to bin - '%(DependencyBinariesDirectories)'."
		/>
		<Copy
			DestinationFiles="@($(NuGetPackageDirectory)%(DependencyBinariesDirectories)->'bin\%(RecursiveDir)%(Filename)%(Extension)')"
			SkipUnchangedFiles="true"
			SourceFiles="@($(NuGetPackageDirectory)%(DependencyBinariesDirectories))"
		/>
		-->
	</Target>
	<Target Name="AfterBackupCurrentHansKindbergXmlTransform" xdt:Transform="Insert">
		<Message
			Importance="$(MessageImportance)"
			Text="Target 'AfterBackupCurrentHansKindbergXmlTransform'"
		/>
		<Message
			Condition="Exists($(HansKindbergXmlTransformBackupPath)) AND Exists(%(HansKindbergXmlTransformSource.Identity))"
			Importance="$(MessageImportance)"
			Text="Target 'AfterBackupCurrentHansKindbergXmlTransform': Backing up '%(HansKindbergXmlTransformSource.Identity)' to '$(HansKindbergXmlTransformBackupPath)%(HansKindbergXmlTransformSource.Identity)'."
		/>
		<Copy
			Condition="Exists($(HansKindbergXmlTransformBackupPath)) AND Exists(%(HansKindbergXmlTransformSource.Identity))"
			DestinationFiles="$(HansKindbergXmlTransformBackupPath)%(HansKindbergXmlTransformSource.Identity)"
			SourceFiles="%(HansKindbergXmlTransformSource.Identity)"
		/>
	</Target>
	<Target Name="AfterRestorePreviousHansKindbergXmlTransform" xdt:Transform="Insert">
		<Message
			Importance="$(MessageImportance)"
			Text="Target 'AfterRestorePreviousHansKindbergXmlTransform'"
		/>
		<Message
			Condition="Exists('$(HansKindbergXmlTransformBackupPath)%(HansKindbergXmlTransformSource.Identity)')"
			Importance="$(MessageImportance)"
			Text="Target 'AfterRestorePreviousHansKindbergXmlTransform': Restoring '$(HansKindbergXmlTransformBackupPath)%(HansKindbergXmlTransformSource.Identity)' to '%(HansKindbergXmlTransformSource.Identity)'."
		/>
		<Copy
			Condition="Exists('$(HansKindbergXmlTransformBackupPath)%(HansKindbergXmlTransformSource.Identity)')"
			DestinationFiles="%(HansKindbergXmlTransformSource.Identity)"
			SourceFiles="$(HansKindbergXmlTransformBackupPath)%(HansKindbergXmlTransformSource.Identity)"
		/>
		<Message
			Condition="!Exists('$(HansKindbergXmlTransformBackupPath)%(HansKindbergXmlTransformSource.Identity)') AND Exists(%(HansKindbergXmlTransformSource.Identity))"
			Importance="$(MessageImportance)"
			Text="Target 'AfterRestorePreviousHansKindbergXmlTransform': Deleting '%(HansKindbergXmlTransformSource.Identity)'."
		/>
		<Delete
			Condition="!Exists('$(HansKindbergXmlTransformBackupPath)%(HansKindbergXmlTransformSource.Identity)') AND Exists(%(HansKindbergXmlTransformSource.Identity))"
			Files="%(HansKindbergXmlTransformSource.Identity)"
		/>
	</Target>
	<PropertyGroup xdt:Transform="Insert">
		<PopulateHansKindbergXmlTransformSourceDependsOn>
			$(PopulateHansKindbergXmlTransformSourceDependsOn);
			PopulateFromConfigurationTemplate;
		</PopulateHansKindbergXmlTransformSourceDependsOn>
	</PropertyGroup>
	<Target Name="PopulateFromConfigurationTemplate" xdt:Transform="Insert">
		<Message
			Importance="$(MessageImportance)"
			Text="Target 'PopulateFromConfigurationTemplate'."
		/>
		<Message
			Condition="!Exists(%(ConfigurationTemplate.Transform))"
			Importance="$(MessageImportance)"
			Text="Target 'PopulateFromConfigurationTemplate': Copying '%(ConfigurationTemplate.Identity)' to '%(ConfigurationTemplate.Destination)'."
		/>
		<Copy
			Condition="!Exists(%(ConfigurationTemplate.Transform))"
			DestinationFiles="%(ConfigurationTemplate.Destination)"
			SourceFiles="%(ConfigurationTemplate.Identity)"
		/>
		<Message
			Condition="Exists(%(ConfigurationTemplate.Transform))"
			Importance="$(MessageImportance)"
			Text="Target 'PopulateFromConfigurationTemplate': Transforming '%(ConfigurationTemplate.Identity)' with '%(ConfigurationTemplate.Transform)' to '%(ConfigurationTemplate.Destination)'."
		/>
		<TransformXml
			Condition="Exists(%(ConfigurationTemplate.Transform))"
			Destination="%(ConfigurationTemplate.Destination)"
			Source="%(ConfigurationTemplate.Identity)"
			StackTrace="True"
			Transform="%(ConfigurationTemplate.Transform)"
		/>
	</Target>
</Project>